<?
class protxPayment
{
	var $mode = "live";
	var $data;
	var $Server_IP = '87.106.131.125';

	function protxPayment($vendor, $amount, $description, $address = "", $currency = "GBP",$transType="PAYMENT",$order_id=0)
	{
		global $ecom_siteid,$ecom_3dsecured;
		srand(time());
		$amount = sprintf("%.2f",$amount);
		$txcode = $vendor . (rand(0,320000) * rand(0,320000)).$order_id;
			$this->data = array (
					'VPSProtocol' => "2.22", 				// Protocol version
					'TxType' => $transType,//'PREAUTH',		// Transaction type
					'Vendor' => $vendor,					// Vendor name (specified in init-protx.php)
					'VendorTxCode' => $txcode,				// Unique transaction code (generated by vendor)
					'Amount' => $amount,					// Value of order (supplied by vendor)
					'Currency' => $currency,				// Currency of order (default specified in init-protx.php)
					'Description' => $description,			// Description of order 
					'BillingAddress' => substr($address, 0, 200),
					'Apply3DSecure' => $ecom_3dsecured
				);
						//print_r($this->data);
						//exit;
	}

	function get_form_data()
	{
		// Check if client number is supplied
		if(trim($_REQUEST['ClientNumber']) != ''){
			// If so, add client number to data array to be appended to POST
			$this->data['ClientNumber'] = $_REQUEST['ClientNumber'];
		}
		
		// Add card holder name
		$this->data['CardHolder'] = $_REQUEST['checkoutpay_nameoncard'];
		// Add card number
		$this->data['CardNumber'] = $_REQUEST['checkoutpay_cardnumber'];
		
		// Check if start date is supplied
		if($_REQUEST['checkoutpay_issuedate_month']){
			// If so, add start date to data array to be appended to POST
			$this->data['StartDate'] = $_REQUEST['checkoutpay_issuedate_month'] . $_REQUEST['checkoutpay_issuedate_year'];
		}
		
		// Add expiry date
		$this->data['ExpiryDate'] = $_REQUEST['checkoutpay_expirydate_month'] . $_REQUEST['checkoutpay_expirydate_year'];


		// Check if issue number is supplied
		if(trim($_REQUEST['checkoutpay_issuenumber']) != ''){
			// If so, add issue number to data array to be appended to POST
			$this->data['IssueNumber'] = $_REQUEST['checkoutpay_issuenumber'];
		}
		// Check if CV2 data is supplied
		if(trim($_REQUEST['checkoutpay_securitycode']) != ''){
			// If so, add CV2 data to data array to be appended to POST
			$this->data['CV2'] = $_REQUEST['checkoutpay_securitycode'];
		}
		
		$card_type_arr			= explode("_",$_REQUEST["checkoutpay_cardtype"]);
		// Add card type
		$this->data['CardType'] = $card_type_arr[0];

		// Add postcode if address is present
		if($this->data["BillingAddress"] && $_REQUEST['checkout_zipcode']) {
				$this->data["BillingPostCode"] = substr($_REQUEST['checkout_zipcode'], 0, 10);
		}
		elseif($this->data["BillingAddress"] && $_REQUEST['checkout_voucherzipcode']) {
			$this->data["BillingPostCode"] = substr($_REQUEST['checkout_voucherzipcode'], 0, 10);
		}
	}

	function set_mode($mode)
	{
		if($mode == "live" || $mode == "testing") $this->mode = $mode;
		else die("Invalid protx mode");
	}



	function send()
	{
		global $ecom_siteid;
		set_time_limit(60);
		$output = array();

		// Select url
		if($this->mode == "live") $url = "https://live.sagepay.com/gateway/service/vspdirect-register.vsp";
		else $url = "https://test.sagepay.com/gateway/service/vspdirect-register.vsp";
			
		
		// Format data
		$postdata = "";
		foreach($this->data as $key => $value){
			$postdata .= "&" . $key . "=". urlencode($value);
		}
		$postdata = substr($postdata, 1);		

		$curlSession = curl_init();
		curl_setopt($curlSession, CURLOPT_INTERFACE, $this->Server_IP);
		curl_setopt($curlSession, CURLOPT_URL, $url);
		curl_setopt($curlSession, CURLOPT_HEADER, 0);
		curl_setopt($curlSession, CURLOPT_POST, 1);
		curl_setopt($curlSession, CURLOPT_POSTFIELDS, $postdata);
		curl_setopt($curlSession, CURLOPT_RETURNTRANSFER,1);
		curl_setopt($curlSession, CURLOPT_TIMEOUT,30); 

		$response = split(chr(10), curl_exec ($curlSession));

		if (curl_error($curlSession)){
			$output['Status'] = "FAIL";
			$output['StatusDetail'] = curl_error($curlSession);
		}

		curl_close ($curlSession);


		for ($i=0; $i<count($response); $i++){
			$splitAt = strpos($response[$i], "=");
			$output[trim(substr($response[$i], 0, $splitAt))] = trim(substr($response[$i], ($splitAt+1)));
		}
		return $output;
	}

	function get_txcode()
	{
		return $this->data["VendorTxCode"];
	}
}

class protxPayment3DSecure
{
	var $mode = "live";
	var $data;


	function protxPayment3DSecure($MD, $PARes )
	{
		global $ecom_siteid;
		
		//if ($ecom_siteid == 341) {
			$this->data = array (
					'MD' => $MD, 				// Protocol version
					'PARes' => urlencode($PARes)
			);
			
	}

	
	function set_mode($mode)
	{
		if($mode == "live" || $mode == "testing") $this->mode = $mode;
		else die("Invalid protx mode");
	}



	function send()
	{
		global $ecom_siteid;
		set_time_limit(60);
		$output = array();

		// Select url

		if($this->mode == "live") $url = "https://live.sagepay.com/gateway/service/direct3dcallback.vsp";
		else $url = "https://test.sagepay.com/gateway/service/direct3dcallback.vsp";
			

		// Format data
		$postdata = "";
		foreach($this->data as $key => $value){
			$postdata .= "&" . $key . "=". $value;
		}
		$postdata = substr($postdata, 1);		

		$curlSession = curl_init();
		curl_setopt($curlSession, CURLOPT_INTERFACE, $this->Server_IP);
		curl_setopt($curlSession, CURLOPT_URL, $url);
		curl_setopt($curlSession, CURLOPT_HEADER, 0);
		curl_setopt($curlSession, CURLOPT_POST, 1);
		curl_setopt($curlSession, CURLOPT_POSTFIELDS, $postdata);
		curl_setopt($curlSession, CURLOPT_RETURNTRANSFER,1);
		curl_setopt($curlSession, CURLOPT_TIMEOUT,30); 

		$response = split(chr(10), curl_exec ($curlSession));

		if (curl_error($curlSession)){
			$output['Status'] = "FAIL";
			$output['StatusDetail'] = curl_error($curlSession);
		}

		curl_close ($curlSession);


		for ($i=0; $i<count($response); $i++){
			$splitAt = strpos($response[$i], "=");
			$output[trim(substr($response[$i], 0, $splitAt))] = trim(substr($response[$i], ($splitAt+1)));
		}

		return $output;
	}

	
}
?>
